(defun rev (x &optional (res '()))
    (cond
        ((null x) res)
        (t (rev (cdr x) (cons (car x) res)))
    )
)

(print "Задание 1. Определите FUNCALL через функционал APPLY.")

(defun myFuncall (f &rest args)
    (cond
        ((NULL args) nil)
        (t(APPLY f args))
    )
)



(print (myFuncall '+ 1 2 3 4))
(print (myFuncall '* 1 2 3 4))
(print (myFuncall '+ ))
 
(print "Задание 3. Определите функционал (APL-APPLY f x), который применяет каждую функцию fi списка (f1 f2 ... fn)
к соответствующему элементу спискаx = (x1 x2 ... xn) и воявращает список, сформированный из результатов.")

(defun APL-APPLY (f args &optional (res '()))
    (cond
        ((NULL args) (rev res))
        ((NULL f) nil)
        (t (APL-APPLY (cdr f) (cdr args) (cons (APPLY (car f) (car args)) res ) ) )
    )
)


(print (APL-APPLY '(+ - * /) '((1 2) (3 4) (5 6) (7 8))))
(print (APL-APPLY '(car cdr ATOM) '( ((1 2)) ((3 4)) ((5 6)))))
(print (APL-APPLY '() '((1 2) (3 4) (5 6) (7 8))))
 
(print "Задание 5. Определите функциональный предикат (НЕКОТОРЫй пред список), который истинен, когда,
       являющийся функциональным аргументом предикат ПРЕД истинен хоть бы для одного элемента списка СПИСОК.")

(defun НЕКОТОРЫЙ (пред список)
    (cond
        ((NULL список) nil)
        ((APPLY пред (car список)) t)
        (t (НЕКОТОРЫЙ пред (cdr список)))
    )
)

(print (НЕКОТОРЫЙ 'ATOM '((a) ()) ) )
(print (НЕКОТОРЫЙ 'ATOM '( ((a b)) ((1 2)) ) ) )
(print (НЕКОТОРЫЙ 'equal '( (1 2) (3 3)) ))

(print "Задание 7. Определите фильтр (УДАЛИТЬ-ЕСЛИ-НЕ пред список), удаляющий из списка СПИСОК
все элементы, которые не обладают свойством, наличие которого проверяет предикат пред.")

(defun УДАЛИТЬ-ЕСЛИ-НЕ (пред список &optional (res '()))
    ((lambda (f1)
        (cond
        ((NULL список) (rev res))
        ((APPLY пред f1) (УДАЛИТЬ-ЕСЛИ-НЕ пред (cdr список) (cons f1 res)))
        (t (УДАЛИТЬ-ЕСЛИ-НЕ пред (cdr список) res))
    ))
    (car список))
)

(print (УДАЛИТЬ-ЕСЛИ-НЕ 'ATOM '((a) ) ) )
(print (УДАЛИТЬ-ЕСЛИ-НЕ 'equal '((1 2) (2 2) (3 3) (4 5)) ))
(print (УДАЛИТЬ-ЕСЛИ-НЕ 'ATOM '( ((1 2)) (3) )  ))


(print "Задание 9. Напишите генератор порождения чисел Фибоначчи: 0, 1, 1, 2, 3, 5, ...")

(defun ГЕНЕРАТОР (N &optional (cnt 0) (res '()))
    ((lambda (f1)
        (cond
            ((< N 1) nil)
            ((= cnt N) (rev res))
            ((< cnt 2) (ГЕНЕРАТОР N f1 (cons cnt res)))
            (t (ГЕНЕРАТОР N f1 (cons (+ (car res) (cadr res)) res)))
        ))
    (+ cnt 1))
)

(print (ГЕНЕРАТОР 10))
(print (ГЕНЕРАТОР 1))
(print (ГЕНЕРАТОР 2))
(print (ГЕНЕРАТОР 0))

(print "Задание 11. Определите фукнционал МНОГОФУН, который использует функции, являющиеся
аргументами, по следующей схеме: (МНОГОФУН ’(f g ... h) x) ⇔ (LIST (f x) (g x) ... (h x)).")


(defun МНОГОФУН (f x &optional (res '()))
    (cond
        ((NULL f) (rev res))
        (t (МНОГОФУН (cdr f) x (cons (list (APPLY (car f) x)) res)))
        )
)


(print (МНОГОФУН '(+ - *) '(4 3 4)))
(print (МНОГОФУН '(car cadr atom) '((4 3 2 1)) ))
(print (МНОГОФУН '() '(1 2)))
